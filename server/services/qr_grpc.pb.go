// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: qr.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QrClient is the client API for Qr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QrClient interface {
	Qr(ctx context.Context, opts ...grpc.CallOption) (Qr_QrClient, error)
}

type qrClient struct {
	cc grpc.ClientConnInterface
}

func NewQrClient(cc grpc.ClientConnInterface) QrClient {
	return &qrClient{cc}
}

func (c *qrClient) Qr(ctx context.Context, opts ...grpc.CallOption) (Qr_QrClient, error) {
	stream, err := c.cc.NewStream(ctx, &Qr_ServiceDesc.Streams[0], "/services.Qr/Qr", opts...)
	if err != nil {
		return nil, err
	}
	x := &qrQrClient{stream}
	return x, nil
}

type Qr_QrClient interface {
	Send(*QrRequest) error
	Recv() (*QrResponse, error)
	grpc.ClientStream
}

type qrQrClient struct {
	grpc.ClientStream
}

func (x *qrQrClient) Send(m *QrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *qrQrClient) Recv() (*QrResponse, error) {
	m := new(QrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QrServer is the server API for Qr service.
// All implementations must embed UnimplementedQrServer
// for forward compatibility
type QrServer interface {
	Qr(Qr_QrServer) error
	mustEmbedUnimplementedQrServer()
}

// UnimplementedQrServer must be embedded to have forward compatible implementations.
type UnimplementedQrServer struct {
}

func (UnimplementedQrServer) Qr(Qr_QrServer) error {
	return status.Errorf(codes.Unimplemented, "method Qr not implemented")
}
func (UnimplementedQrServer) mustEmbedUnimplementedQrServer() {}

// UnsafeQrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QrServer will
// result in compilation errors.
type UnsafeQrServer interface {
	mustEmbedUnimplementedQrServer()
}

func RegisterQrServer(s grpc.ServiceRegistrar, srv QrServer) {
	s.RegisterService(&Qr_ServiceDesc, srv)
}

func _Qr_Qr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QrServer).Qr(&qrQrServer{stream})
}

type Qr_QrServer interface {
	Send(*QrResponse) error
	Recv() (*QrRequest, error)
	grpc.ServerStream
}

type qrQrServer struct {
	grpc.ServerStream
}

func (x *qrQrServer) Send(m *QrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *qrQrServer) Recv() (*QrRequest, error) {
	m := new(QrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Qr_ServiceDesc is the grpc.ServiceDesc for Qr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Qr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Qr",
	HandlerType: (*QrServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Qr",
			Handler:       _Qr_Qr_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "qr.proto",
}
